#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "drivers/rgb.h"
#include "drivers/buttons.h"
#include "utils/uartstdio.h"
#include "brs_c_bt_task.h"
#include "../../smart_data_types.h"
#include "priorities.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

//*****************************************************************************
//
// The stack size for the UART task.
//
//*****************************************************************************
#define BLUETOOTHTASKSTACKSIZE        128         // Stack size in words
#define BLUETOOTH_QUEUE_SIZE          5           // Queue size in messages

//*****************************************************************************
//
// Queue Handles Needed
//
//*****************************************************************************
xQueueHandle g_pBluetoothSendQueue;
xQueueHandle g_pBluetoothReceiveQueue;


#ifdef DEBUG_ONLY //Debug Bluetooth Task
static void BluetoothTask(void *pvParameters)
{
    portTickType     ui32WakeTime;
    BluetoothFrame_t* pReceivedBTFrame = malloc(sizeof(BluetoothFrame_t));
    TM_Frame_t*       pFrameToSend     = NULL;

    //
    // Get the current tick count.
    //
    ui32WakeTime = xTaskGetTickCount();

    //Initialize the Receive Frame and TM Frame
    memset(&receivedBTFrame, 0, sizeof(BluetoothFrame_t));
    pFrameToSend = createTMFrame();


    //
    // Loop forever.
    //
    while(1)
    {
    	vTaskDelayUntil(&ui32WakeTime, BT_TASK_DELAY / portTICK_RATE_MS);//Do Stuff
    }


}

#else //Tactical Bluetooth Task
static void BluetoothTask(void *pvParameters)
{
    BluetoothFrame_t receivedBTFrame;
    TM_Frame_t*      pFrameToSend = NULL;

    //
    // Get the current tick count.
    //
    ui32WakeTime = xTaskGetTickCount();

    //Initialize the Receive Frame and TM Frame
    memset(&receivedBTFrame, 0, sizeof(BluetoothFrame_t));
    pFrameToSend = createTMFrame();

    //
    // Loop forever.
    //
    while(1)
    {
    	//Do Stuff
    }
}

#endif

//*****************************************************************************
//
// Initializes the Bluetooth task.
//
//*****************************************************************************
uint32_t BluetoothTaskInit(void)
{
    UARTprintf("Initializing Bluetooth Task...\n");

    //
    // Create a queue for sending/receiving messages
    //
    g_pBluetoothSendQueue    = xQueueCreate(BLUETOOTH_QUEUE_SIZE,BRS2MD_SIZE);
    g_pBluetoothReceiveQueue = xQueueCreate(BLUETOOTH_QUEUE_SIZE,MD2BRS_SIZE);

    //
    // Create the Bluetooth task.
    //
    if(xTaskCreate(BluetoothTask, (signed portCHAR *)"Bluetooth", BLUETOOTHTASKSTACKSIZE, NULL,
                   tskIDLE_PRIORITY + PRIORITY_BT_TASK, NULL) != pdTRUE)
    {
        return(1);
    }

    //
    // Success.
    //
    return(0);
}
