/*
 * brs_c_uart.h
 *
 *  Created on: Sep 25, 2015
 *      Author: Rafael
 */

#ifndef BRS_C_UART_H_
#define BRS_C_UART_H_

//Necessary Libraries
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "driverlib/debug.h"
#include "driverlib/fpu.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "brs_c_message_constants.h"

//*****************************************************************************
//
// Blink the LED for Debugging/Status
//
//*****************************************************************************
void LED_Blink(uint16_t delay);

#ifdef UART_INTERRUPT
//*****************************************************************************
//
// Initialize the UART for interrupt enabled responses. This will be our
// Secondary method of UART Communication if the UART Task is not responsive
//
//*****************************************************************************
void Init_UART();

//*****************************************************************************
//
// The UART interrupt handler.
//
//*****************************************************************************
void UARTIntHandler(void);

#else //Use UART FreeRTOS Task

//*****************************************************************************
//
// Configure the UART and its pins.  This must be called before UARTprintf().
//
//*****************************************************************************
void ConfigureUART(void);

#endif //UART_INTERRUPT


//*****************************************************************************
//
// Send a string to the UART.
//
//*****************************************************************************
void UARTSend(const uint8_t *pui8Buffer, uint32_t ui32Count);


//*****************************************************************************
//
// Retrieve a string from the UART, return bytes actually read
//
//*****************************************************************************
uint16_t UARTReceive(volatile uint8_t *pui8Buffer, uint32_t ui32Count);


//*****************************************************************************
//
// Check for Messages coming in from the UART and handle them appropriately.
// Parameter should be the base address of a received character buffer
//
//*****************************************************************************
void CheckMessageID(volatile uint8_t* addr);


//*****************************************************************************
//
// Read Incoming BCI Message
//
//*****************************************************************************
void ReadBCI2BRSMsg(volatile uint8_t *pui8Buffer, uint32_t ui32Count);


//*****************************************************************************
//
// Read Incoming Mobile Device Message
//
//*****************************************************************************
void ReadMD2BRSMsg(volatile uint8_t *pui8Buffer, uint32_t ui32Count);

#endif /* BRS_C_UART_H_ */
