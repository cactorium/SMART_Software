/*
 * brs_c_led.c
 *
 *  Created on: Sep 29, 2015
 *      Author: Rafael
 */

#include "brs_c_led.h"

// LED Color Access
//
// [G, R, B] range is 0 to 0xFFFF per color.
//
static uint32_t g_pui32Colors[NUM_LED_COLORS] = { 0x0000, 0x0000, 0x0000 };
static uint8_t g_ui8ColorsIndx;

void ConfigureLEDs()
{
    //
    // Initialize the GPIOs and Timers that drive the three LEDs.
    //
    RGBInit(1);
    RGBIntensitySet(0.3f);

    //Status Good
    BlinkLED(GREEN, 3);
}

void BlinkLED(LEDColor ledColor, uint8_t numTimes)
{
    portTickType ui32WakeTime;
    uint8_t i = 0;

    for (i = 0; i < numTimes; i++)
    {
		// Get the current tick count.
		ui32WakeTime = xTaskGetTickCount();

		//Turn On the LED
		SetLED(ledColor, LED_ON);

		// Wait for the required amount of time.
		vTaskDelayUntil(ui32WakeTime, LED_TOGGLE_DELAY / portTICK_RATE_MS);

		//Turn Off the LED
		SetLED(ledColor, LED_OFF);
    }

}

void SetLED(LEDColor color, int state)
{
	if (ledColor >= NUM_LED_COLORS)
	{
		return;
	}

	//Set the Applicable LED on or off
	if (state == LED_ON)
	{
		g_ui8ColorsIndx[color] = LED_ON;
		RGBColorSet(g_pui32Colors);
		RGBEnable();
	}
	else
	{
		RGBDisable();
	}
}

//*****************************************************************************
//
// Set LED with full RGB Functionality
//
//*****************************************************************************
void SetLEDRGB(uint32_t red, uint32_t green, uint32_t blue)
{

}
